name: Create Release and Update info.json

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.get_version.outputs.VERSION }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: ${{ steps.get_version.outputs.VERSION }}"
            exit 1
          fi

      - name: Create plugin zip
        run: |
          # Create a clean copy without development files
          mkdir -p build
          rsync -av --exclude-from=.gitignore \
            --exclude='.git*' \
            --exclude='.github' \
            --exclude='tests' \
            --exclude='phpunit.xml' \
            --exclude='composer.json' \
            --exclude='composer.lock' \
            --exclude='*.md' \
            --exclude='build' \
            . build/morden-image-optimizer/

          cd build
          zip -r morden-image-optimizer.zip morden-image-optimizer/

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(cat << 'EOF'
          ## What's New in v${{ steps.get_version.outputs.VERSION }}

          ### ðŸš€ Features
          - Automatic image optimization on upload
          - Bulk optimization for existing images
          - Original image backup and restore
          - Support for multiple optimization methods (Imagick, GD, APIs)

          ### ðŸ”§ Technical Improvements
          - Enhanced error handling and logging
          - Improved performance monitoring
          - Better security implementation

          ### ðŸ“¦ Installation
          1. Download the plugin zip file below
          2. Upload to WordPress via Plugins > Add New > Upload Plugin
          3. Activate and configure in Settings > Morden Optimizer
          EOF
          )
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Morden Image Optimizer v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/morden-image-optimizer.zip
          asset_name: morden-image-optimizer.zip
          asset_content_type: application/zip

      - name: Update info.json
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          DOWNLOAD_URL="https://github.com/sadewadee/morden-image-optimizer/releases/download/v${VERSION}/morden-image-optimizer.zip"

          # Check if jq is available, install if not
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Update info.json
          jq --arg version "$VERSION" \
             --arg download_url "$DOWNLOAD_URL" \
             '.version = $version | .download_url = $download_url' \
             info.json > info.json.tmp && mv info.json.tmp info.json

      - name: Commit updated info.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add info.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update info.json for version ${{ steps.get_version.outputs.VERSION }}"
            git push origin HEAD:main
          fi
